{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"solr_ir","provenance":[],"authorship_tag":"ABX9TyNNlGojcjUVxdDKJi8HyTv7"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["%%shell\n","curl -s https://download.docker.com/linux/static/stable/x86_64/docker-19.03.9.tgz | tar vxz --strip=1 -C /usr/local/bin/\n","curl -s https://download.docker.com/linux/static/stable/x86_64/docker-rootless-extras-19.03.9.tgz | tar vxz --strip=1 -C /usr/local/bin/\n","useradd -md /home/docker docker\n","apt-get -qqq install iproute2 uidmap\n","docker --version"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sri42YB0__pU","executionInfo":{"status":"ok","timestamp":1648361786750,"user_tz":-180,"elapsed":8844,"user":{"displayName":"Qa Task","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02359377570863894136"}},"outputId":"5f1c2a3a-e7c6-4c42-903f-f124391b144d"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["docker/docker-init\n","docker/runc\n","docker/docker\n","docker/docker-proxy\n","docker/containerd\n","docker/ctr\n","docker/dockerd\n","docker/containerd-shim\n","docker-rootless-extras/vpnkit\n","docker-rootless-extras/dockerd-rootless.sh\n","docker-rootless-extras/rootlesskit\n","docker-rootless-extras/rootlesskit-docker-proxy\n","useradd: group docker exists - if you want to add this user to that group, use -g.\n","Selecting previously unselected package uidmap.\n","(Reading database ... 157104 files and directories currently installed.)\n","Preparing to unpack .../uidmap_1%3a4.5-1ubuntu2.2_amd64.deb ...\n","Unpacking uidmap (1:4.5-1ubuntu2.2) ...\n","Setting up uidmap (1:4.5-1ubuntu2.2) ...\n","Processing triggers for man-db (2.8.3-2ubuntu0.1) ...\n","Docker version 19.03.9, build 9d988398e7\n"]},{"output_type":"execute_result","data":{"text/plain":[""]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["!docker pull solr \n","!docker run --name mysolr -d -p 8983:8983 -v D:\\Motaz\\solr_vol -t /var/solr\n","!docker exec -it --user=solr mysolr bin/solr create_core -c qa_core"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-t3coUTmAobK","executionInfo":{"status":"ok","timestamp":1648361816824,"user_tz":-180,"elapsed":614,"user":{"displayName":"Qa Task","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"02359377570863894136"}},"outputId":"232e5406-baf0-4ce2-ed01-01674fdb9cee"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Using default tag: latest\n","Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n","docker: invalid reference format.\n","See 'docker run --help'.\n","Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"GmK6gv1s_mNl"},"outputs":[],"source":["import requests \n","import read_write_qrcd as q_reader\n","import pysolr"]},{"cell_type":"code","source":["def del_solr_data(solr_core='qa_core', url='http://localhost:8983/solr/'):\n","    import requests\n","    headers = { 'Content-Type': 'text/xml'}\n","    params = { 'commit': 'true'}\n","    data = '<delete><query>*:*</query></delete>'\n","\n","    response = requests.post(\n","        '{}{}/update'.format(url, solr_core), \n","        headers=headers, \n","        params=params, \n","        data=data)\n","    return response\n","################################################\n","def prepare_data(data_item):\n","    result_list = []\n","    \n","    pq_id = data_item['pq_id'].split(':')[0]\n","    verse_start = int(data_item['verses'].split('-')[0])\n","    passages = [ver.strip() for ver in data_item.get('passage').split('.') if ver.strip()]\n","    for passage in passages:\n","        doc = {\n","            'id': pq_id + '_' + str(verse_start),\n","            'doc': passage\n","        }\n","        verse_start+=1\n","        result_list.append(doc)\n","\n","    return result_list\n","################################################\n","\n","def solr_ir(docs_data, query, solr_engine):\n","    # make_sure there is no indexed docs \n","    solr_engine.delete(q='*:*')\n","    # index docs \n","    solr_engine.add(docs_data)\n","    # query \n","    query = query.replace('ØŸ', '').replace('\"', '')\n","    search_results = solr_engine.search(\n","        q=query, \n","        fl='id,doc,score', df='doc')\n","    result_list = []\n","    for r in search_results:\n","        #print(\"id: {}. doc: {}. score: {}\".format(r['id'], r['doc'], r['score']))\n","        result_list.append( {'id': r['id'], 'doc': r['doc'], 'score': r['score'] })\n","    # delete docs \n","    solr_engine.delete(q='*:*')\n","    # return results \n","    return search_results"],"metadata":{"id":"J4ohB2_8_sJ-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_data_file = '../quranqa/datasets/qrcd_v1.1_train.jsonl'\n","train = q_reader.load_jsonl(train_data_file)"],"metadata":{"id":"kCxL-LTn_uzR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solr_url = 'http://localhost:8983/solr/qa_core'\n"],"metadata":{"id":"LRRcMzt7_wt3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["solr = pysolr.Solr(url=solr_url, always_commit=True)\n","solr.ping()"],"metadata":{"id":"4bd5nMcD_yjH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def run_experiment(data_id):\n","    print('data instance')\n","    data_instance = train[data_id]\n","    print(data_instance)\n","    print('++++++++++++++++++++++++++++')\n","    print('prepared data')\n","    docs_data = prepare_data(data_instance)\n","    print(docs_data)\n","    print('++++++++++++++++++++++++++++')\n","    query = data_instance.get('question')\n","    print('question:', query)\n","    print('++++++++++++++++++++++++++++')\n","    answers = data_instance.get('answers')\n","    print('answers:', answers)\n","    print('++++++++++++++++++++++++++++')\n","    print('Solr query results')\n","    results = solr_ir(docs_data=docs_data, query=query, solr_engine=solr)\n","    for r in results:\n","        print(r)\n","    "],"metadata":{"id":"bZfAT8Gd_0ZD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["run_experiment(0)\n"],"metadata":{"id":"KwwjloxF_2lu"},"execution_count":null,"outputs":[]}]}